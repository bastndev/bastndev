name: Latest YouTube Video
on:
  schedule:
    - cron: "0 */12 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Generate YouTube cards with duration filter
        run: |
          cat << 'EOF' > generate-youtube-cards.js
          const https = require('https');
          const fs = require('fs');
          
          // CONFIGURACIÓN
          const CONFIG = {
            CHANNEL_ID: 'UC1SrBBxff-ONko-0QKL1Bng',
            MIN_DURATION_MINUTES: 3,     // Duración mínima en minutos
            MAX_VIDEOS_TO_SHOW: 3,       // Cantidad de videos a mostrar
            MAX_VIDEOS_TO_SEARCH: 20     // Cantidad de videos a buscar inicialmente
          };
          
          function makeRequest(url) {
            return new Promise((resolve, reject) => {
              https.get(url, (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                  try {
                    resolve(JSON.parse(data));
                  } catch (e) {
                    reject(e);
                  }
                });
              }).on('error', reject);
            });
          }
          
          async function generateYouTubeCards() {
            try {
              const API_KEY = process.env.YOUTUBE_API_KEY;
              const MIN_DURATION_SECONDS = CONFIG.MIN_DURATION_MINUTES * 60;
              
              console.log(`Configuración: Buscando videos de ${CONFIG.MIN_DURATION_MINUTES}+ minutos`);
              console.log('Obteniendo videos del canal...');
              
              // Obtener videos del canal
              const searchUrl = `https://www.googleapis.com/youtube/v3/search?key=${API_KEY}&channelId=${CONFIG.CHANNEL_ID}&part=snippet&order=date&type=video&maxResults=${CONFIG.MAX_VIDEOS_TO_SEARCH}`;
              const searchData = await makeRequest(searchUrl);
              
              if (!searchData.items || searchData.items.length === 0) {
                console.log('No se encontraron videos');
                return;
              }
              
              console.log(`Videos encontrados: ${searchData.items.length}`);
              
              // Obtener detalles de duración
              const videoIds = searchData.items.map(item => item.id.videoId).join(',');
              const detailsUrl = `https://www.googleapis.com/youtube/v3/videos?key=${API_KEY}&id=${videoIds}&part=contentDetails,snippet,statistics`;
              const detailsData = await makeRequest(detailsUrl);
              
              // Función para convertir duración ISO 8601 a segundos
              function parseISO8601Duration(duration) {
                const match = duration.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);
                const hours = parseInt(match[1] || 0);
                const minutes = parseInt(match[2] || 0);
                const seconds = parseInt(match[3] || 0);
                return hours * 3600 + minutes * 60 + seconds;
              }
              
              // Función para formatear duración
              function formatDuration(seconds) {
                const hours = Math.floor(seconds / 3600);
                const minutes = Math.floor((seconds % 3600) / 60);
                const secs = seconds % 60;
                
                if (hours > 0) {
                  return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
                }
                return `${minutes}:${secs.toString().padStart(2, '0')}`;
              }
              
              // Función para formatear número de vistas
              function formatViews(views) {
                const num = parseInt(views);
                if (num >= 1000000) {
                  return (num / 1000000).toFixed(1) + 'M';
                } else if (num >= 1000) {
                  return (num / 1000).toFixed(1) + 'K';
                }
                return num.toString();
              }
              
              // Función para calcular tiempo transcurrido
              function getTimeAgo(publishedAt) {
                const now = new Date();
                const published = new Date(publishedAt);
                const diffMs = now - published;
                const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
                const diffMonths = Math.floor(diffDays / 30);
                const diffYears = Math.floor(diffDays / 365);
                
                if (diffYears > 0) return `${diffYears} year${diffYears > 1 ? 's' : ''} ago`;
                if (diffMonths > 0) return `${diffMonths} month${diffMonths > 1 ? 's' : ''} ago`;
                if (diffDays > 0) return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
                return 'Today';
              }
              
              // Filtrar videos por duración mínima
              const filteredVideos = detailsData.items
                .filter(video => {
                  const durationInSeconds = parseISO8601Duration(video.contentDetails.duration);
                  const durationInMinutes = Math.floor(durationInSeconds / 60);
                  
                  console.log(`"${video.snippet.title}": ${durationInMinutes}:${(durationInSeconds % 60).toString().padStart(2, '0')} ${durationInSeconds >= MIN_DURATION_SECONDS ? '✅' : '❌'}`);
                  
                  return durationInSeconds >= MIN_DURATION_SECONDS;
                })
                .slice(0, CONFIG.MAX_VIDEOS_TO_SHOW);
              
              console.log(`\nVideos que cumplen el criterio (${CONFIG.MIN_DURATION_MINUTES}+ minutos): ${filteredVideos.length}`);
              
              if (filteredVideos.length === 0) {
                console.log('⚠️ No se encontraron videos que cumplan el criterio de duración');
                return;
              }
              
              // Generar markdown con formato de tabla para GitHub
              let cardsMarkdown = `
<!-- BEGIN YOUTUBE-CARDS -->
<table>
<tr>`;
              
              filteredVideos.forEach((video, index) => {
                const durationSeconds = parseISO8601Duration(video.contentDetails.duration);
                const formattedDuration = formatDuration(durationSeconds);
                const formattedViews = formatViews(video.statistics.viewCount);
                const timeAgo = getTimeAgo(video.snippet.publishedAt);
                const title = video.snippet.title;
                const thumbnail = video.snippet.thumbnails.medium.url;
                
                cardsMarkdown += `
<td align="center">
  <a href="https://www.youtube.com/watch?v=${video.id}">
    <img width="300" src="${thumbnail}" alt="${title}">
  </a>
  <br>
  <a href="https://www.youtube.com/watch?v=${video.id}"><strong>${title}</strong></a>
  <br>
  <sub>${formattedViews} views • ${timeAgo}</sub>
  <br>
  <sub>⏱️ ${formattedDuration}</sub>
</td>`;
                
                // Cada 3 videos, crear nueva fila
                if ((index + 1) % 3 === 0 && index < filteredVideos.length - 1) {
                  cardsMarkdown += `
</tr>
<tr>`;
                }
              });
              
              cardsMarkdown += `
</tr>
</table>
<!-- END YOUTUBE-CARDS -->`;
              
              // Leer el README actual
              let readmeContent = '';
              try {
                readmeContent = fs.readFileSync('README.md', 'utf8');
              } catch (e) {
                console.log('README.md no encontrado, creando uno nuevo');
                readmeContent = '# Mi Canal de YouTube\n\n<!-- YOUTUBE-CARDS:START -->\n<!-- YOUTUBE-CARDS:END -->\n';
              }
              
              // Buscar y reemplazar contenido
              const patterns = [
                { start: '<!-- YOUTUBE-CARDS:START -->', end: '<!-- YOUTUBE-CARDS:END -->' },
                { start: '<!-- BEGIN YOUTUBE-CARDS -->', end: '<!-- END YOUTUBE-CARDS -->' }
              ];
              
              let updated = false;
              
              for (const pattern of patterns) {
                const startIndex = readmeContent.indexOf(pattern.start);
                const endIndex = readmeContent.indexOf(pattern.end);
                
                if (startIndex !== -1 && endIndex !== -1) {
                  const newContent = readmeContent.substring(0, startIndex + pattern.start.length) +
                    '\n' + cardsMarkdown.replace('<!-- BEGIN YOUTUBE-CARDS -->', '').replace('<!-- END YOUTUBE-CARDS -->', '') + '\n' +
                    readmeContent.substring(endIndex);
                  
                  fs.writeFileSync('README.md', newContent);
                  console.log(`✅ README.md actualizado exitosamente usando ${pattern.start}`);
                  updated = true;
                  break;
                }
              }
              
              if (!updated) {
                console.log('❌ No se encontraron los comentarios de YouTube en README.md');
                console.log('Asegúrate de tener alguno de estos:');
                console.log('<!-- YOUTUBE-CARDS:START --> ... <!-- YOUTUBE-CARDS:END -->');
                console.log('<!-- BEGIN YOUTUBE-CARDS --> ... <!-- END YOUTUBE-CARDS -->');
              }
              
            } catch (error) {
              console.error('❌ Error:', error.message);
              if (error.message.includes('403')) {
                console.error('Verifica que tu YOUTUBE_API_KEY sea válida y tenga permisos');
              }
              process.exit(1);
            }
          }
          
          generateYouTubeCards();
          EOF
          
          node generate-youtube-cards.js
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --staged --quiet || git commit -m "📺 Update YouTube cards (videos 3+ minutes only)"
          git push