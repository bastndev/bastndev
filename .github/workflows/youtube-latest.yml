name: Latest YouTube Video
on:
  schedule:
    - cron: "0 */12 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Generate YouTube cards with duration filter
        run: |
          cat << 'EOF' > generate-youtube-cards.js
          const https = require('https');
          const fs = require('fs');
          
          // CONFIGURACI√ìN
          const CONFIG = {
            CHANNEL_ID: 'UC1SrBBxff-ONko-0QKL1Bng',
            MIN_DURATION_MINUTES: 3,
            MAX_VIDEOS_TO_SHOW: 3,
            MAX_VIDEOS_TO_SEARCH: 20
          };
          
          function makeRequest(url) {
            return new Promise((resolve, reject) => {
              const request = https.get(url, (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                  try {
                    const result = JSON.parse(data);
                    if (result.error) {
                      reject(new Error(`API Error: ${result.error.message}`));
                    } else {
                      resolve(result);
                    }
                  } catch (e) {
                    reject(new Error(`Parse Error: ${e.message}`));
                  }
                });
              });
              
              request.on('error', (err) => {
                reject(new Error(`Request Error: ${err.message}`));
              });
              
              request.setTimeout(10000, () => {
                request.destroy();
                reject(new Error('Request timeout'));
              });
            });
          }
          
          async function generateYouTubeCards() {
            try {
              const API_KEY = process.env.YOUTUBE_API_KEY;
              
              if (!API_KEY) {
                throw new Error('YOUTUBE_API_KEY no est√° configurada');
              }
              
              const MIN_DURATION_SECONDS = CONFIG.MIN_DURATION_MINUTES * 60;
              
              console.log(`üîç Buscando videos de ${CONFIG.MIN_DURATION_MINUTES}+ minutos del canal ${CONFIG.CHANNEL_ID}`);
              
              // Obtener videos del canal
              const searchUrl = `https://www.googleapis.com/youtube/v3/search?key=${API_KEY}&channelId=${CONFIG.CHANNEL_ID}&part=snippet&order=date&type=video&maxResults=${CONFIG.MAX_VIDEOS_TO_SEARCH}`;
              console.log('üì° Obteniendo lista de videos...');
              const searchData = await makeRequest(searchUrl);
              
              if (!searchData.items || searchData.items.length === 0) {
                console.log('‚ùå No se encontraron videos en el canal');
                return;
              }
              
              console.log(`‚úÖ Encontrados ${searchData.items.length} videos`);
              
              // Obtener detalles de duraci√≥n
              const videoIds = searchData.items.map(item => item.id.videoId).join(',');
              const detailsUrl = `https://www.googleapis.com/youtube/v3/videos?key=${API_KEY}&id=${videoIds}&part=contentDetails,snippet,statistics`;
              console.log('üìä Obteniendo detalles de duraci√≥n...');
              const detailsData = await makeRequest(detailsUrl);
              
              // Funci√≥n para convertir duraci√≥n ISO 8601 a segundos
              function parseISO8601Duration(duration) {
                try {
                  const match = duration.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);
                  if (!match) return 0;
                  const hours = parseInt(match[1] || 0);
                  const minutes = parseInt(match[2] || 0);
                  const seconds = parseInt(match[3] || 0);
                  return hours * 3600 + minutes * 60 + seconds;
                } catch (e) {
                  return 0;
                }
              }
              
              // Funci√≥n para formatear duraci√≥n
              function formatDuration(seconds) {
                const hours = Math.floor(seconds / 3600);
                const minutes = Math.floor((seconds % 3600) / 60);
                const secs = seconds % 60;
                
                if (hours > 0) {
                  return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
                }
                return `${minutes}:${secs.toString().padStart(2, '0')}`;
              }
              
              // Funci√≥n para formatear n√∫mero de vistas
              function formatViews(views) {
                try {
                  const num = parseInt(views || 0);
                  if (num >= 1000000) {
                    return (num / 1000000).toFixed(1) + 'M';
                  } else if (num >= 1000) {
                    return (num / 1000).toFixed(1) + 'K';
                  }
                  return num.toString();
                } catch (e) {
                  return '0';
                }
              }
              
              // Funci√≥n para calcular tiempo transcurrido
              function getTimeAgo(publishedAt) {
                try {
                  const now = new Date();
                  const published = new Date(publishedAt);
                  const diffMs = now - published;
                  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
                  const diffMonths = Math.floor(diffDays / 30);
                  
                  if (diffMonths > 0) return `${diffMonths} month${diffMonths > 1 ? 's' : ''} ago`;
                  if (diffDays > 0) return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
                  return 'Today';
                } catch (e) {
                  return 'Recently';
                }
              }
              
              console.log('\nüìù Analizando duraci√≥n de videos:');
              
              // Filtrar videos por duraci√≥n m√≠nima
              const filteredVideos = detailsData.items
                .filter(video => {
                  const durationInSeconds = parseISO8601Duration(video.contentDetails.duration);
                  const durationInMinutes = Math.floor(durationInSeconds / 60);
                  const status = durationInSeconds >= MIN_DURATION_SECONDS ? '‚úÖ INCLUIDO' : '‚ùå EXCLUIDO';
                  
                  console.log(`   "${video.snippet.title.substring(0, 50)}..." - ${durationInMinutes}:${(durationInSeconds % 60).toString().padStart(2, '0')} - ${status}`);
                  
                  return durationInSeconds >= MIN_DURATION_SECONDS;
                })
                .slice(0, CONFIG.MAX_VIDEOS_TO_SHOW);
              
              console.log(`\nüéØ Videos finales que cumplen criterio: ${filteredVideos.length}/${CONFIG.MAX_VIDEOS_TO_SHOW}`);
              
              if (filteredVideos.length === 0) {
                console.log('‚ö†Ô∏è No hay videos que cumplan el criterio de duraci√≥n m√≠nima');
                console.log('üí° Considera reducir MIN_DURATION_MINUTES en la configuraci√≥n');
                return;
              }
              
              // Generar contenido para README
              let cardsContent = '';
              
              filteredVideos.forEach((video, index) => {
                const durationSeconds = parseISO8601Duration(video.contentDetails.duration);
                const formattedDuration = formatDuration(durationSeconds);
                const formattedViews = formatViews(video.statistics.viewCount);
                const timeAgo = getTimeAgo(video.snippet.publishedAt);
                const title = video.snippet.title.replace(/[<>&"']/g, (char) => {
                  const entities = { '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;', "'": '&#39;' };
                  return entities[char];
                });
                const thumbnail = video.snippet.thumbnails.medium?.url || video.snippet.thumbnails.default.url;
                
                cardsContent += `
<a href="https://www.youtube.com/watch?v=${video.id}">
  <img src="${thumbnail}" alt="${title}" width="300">
  <br>
  <strong>${title}</strong>
  <br>
  ${formattedViews} views ‚Ä¢ ${timeAgo}
  <br>
  ‚è±Ô∏è ${formattedDuration}
</a>

${index < filteredVideos.length - 1 ? '<br>' : ''}`;
              });
              
              // Leer README actual
              let readmeContent = '';
              try {
                readmeContent = fs.readFileSync('README.md', 'utf8');
                console.log('üìñ README.md le√≠do correctamente');
              } catch (e) {
                console.log('üìù README.md no encontrado, creando estructura b√°sica');
                readmeContent = `# Mi Canal de YouTube

## üî¥ Latest videos Youtube

<!-- BEGIN YOUTUBE-CARDS -->
<!-- END YOUTUBE-CARDS -->
`;
              }
              
              // Buscar patrones de comentarios
              const patterns = [
                { start: '<!-- BEGIN YOUTUBE-CARDS -->', end: '<!-- END YOUTUBE-CARDS -->' },
                { start: '<!-- YOUTUBE-CARDS:START -->', end: '<!-- YOUTUBE-CARDS:END -->' }
              ];
              
              let updated = false;
              
              for (const pattern of patterns) {
                const startIndex = readmeContent.indexOf(pattern.start);
                const endIndex = readmeContent.indexOf(pattern.end);
                
                if (startIndex !== -1 && endIndex !== -1) {
                  console.log(`üîÑ Actualizando contenido usando patr√≥n: ${pattern.start}`);
                  
                  const newContent = 
                    readmeContent.substring(0, startIndex + pattern.start.length) +
                    '\n' + cardsContent + '\n' +
                    readmeContent.substring(endIndex);
                  
                  fs.writeFileSync('README.md', newContent);
                  console.log('‚úÖ README.md actualizado exitosamente');
                  updated = true;
                  break;
                }
              }
              
              if (!updated) {
                console.log('‚ùå No se encontraron patrones de comentarios en README.md');
                console.log('üìã Patrones buscados:');
                patterns.forEach(p => console.log(`   ${p.start} ... ${p.end}`));
                
                // Crear archivo de respaldo con el contenido generado
                fs.writeFileSync('youtube-cards-backup.md', cardsContent);
                console.log('üíæ Contenido guardado en youtube-cards-backup.md');
              }
              
            } catch (error) {
              console.error('‚ùå Error durante la ejecuci√≥n:', error.message);
              
              if (error.message.includes('403')) {
                console.error('üîë Problema con la API Key:');
                console.error('   - Verifica que YOUTUBE_API_KEY est√© configurada');
                console.error('   - Aseg√∫rate de que la API Key tenga permisos para YouTube Data API v3');
                console.error('   - Revisa las cuotas de la API en Google Cloud Console');
              } else if (error.message.includes('404')) {
                console.error('üîç Canal no encontrado:');
                console.error(`   - Verifica el CHANNEL_ID: ${CONFIG.CHANNEL_ID}`);
              }
              
              process.exit(1);
            }
          }
          
          // Ejecutar funci√≥n principal
          console.log('üöÄ Iniciando generaci√≥n de tarjetas de YouTube...');
          generateYouTubeCards();
          EOF
          
          node generate-youtube-cards.js
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      
      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Verificar si hay cambios
          if git diff --quiet HEAD README.md; then
            echo "üìã No hay cambios en README.md"
          else
            echo "üìù Hay cambios, realizando commit..."
            git add README.md
            git commit -m "üì∫ Update YouTube cards (videos 3+ minutes only) - $(date '+%Y-%m-%d %H:%M')"
            git push
            echo "‚úÖ Cambios enviados exitosamente"
          fi